---
description: These rules provide guidance for working with the Battle-Nads frontend codebase, ensuring consistent implementation of architecture patterns and proper integration with the blockchain contracts.
globs: 
alwaysApply: false
---
# Battle-Nads Frontend Development Rules

## Purpose

These rules provide guidance for working with the Battle-Nads frontend codebase, ensuring consistent implementation of architecture patterns and proper integration with the blockchain contracts.

## Key Architecture Principles

1. **Data Flow Pattern**
   - Always follow the established data flow pattern:
     - Historical Data: `localforage` → `useCachedDataFeed`
     - Live Data Reads: Smart Contract → `useBattleNadsClient` → `useUiSnapshot` (informed by `useCachedDataFeed`, combines live/cached) → React-Query Cache (`['uiSnapshot', owner]`) → `useBattleNads` (maps contract→domain→UI) → `useGame` (orchestration) → UI Components
     - Session Key Validation: Smart Contract → `useBattleNadsClient` → `useSessionKey` → `useGame` (*Note: Current implementation uses an independent, redundant fetch*)
     - Data Writes: UI Components → `useGame` (action handlers) → `useBattleNadsClient` → Smart Contract → Invalidate Cache (`['uiSnapshot', owner]`)

2. **Single Source of Truth for Live State**
   - Use `useUiSnapshot` as the single polling source of truth for **live** game world state.
   - `useCachedDataFeed` manages historical data feed caching (events/chat).
   - Do not create additional polling mechanisms for the core world state.
   - Acknowledge that specific, ancillary data (e.g., balances via `useWalletBalances`, session key via `useSessionKey`'s redundant fetch) might have separate queries. Minimize such cases.
   - All gameplay hooks requiring live state must ultimately read from the React-Query cache established by `useUiSnapshot` (often via `useBattleNads`).

3. **XState Integration**
   - Game flow state must use the XState machine in `machines/gameStateMachine.ts`
   - Leverage `useGameMachine` for connecting UI components to the state machine
   - Follow the established state transitions: checkingWallet → checkingCharacter → checkingSessionKey → ready

4. **Client Adapter Pattern**
   - Always use the appropriate client adapter for different access levels:
     - `read` adapter for public data
     - `owner` adapter for owner-authenticated actions
     - `session` adapter for session key operations
   - Never bypass the adapters to call blockchain directly

## Contract Integration Guidelines

1. **Character Management**
   - For character creation, use the `createCharacter` function exposed via relevant hooks/client methods.
   - Rely solely on the `useUiSnapshot` → `useBattleNads` flow for character state.
   - Handle character state through the domain model, not raw contract data

2. **Game Actions**
   - Implement actions (movement, combat, chat) through the mutation hooks provided by `useGame` or specific action hooks (like `useEquipment`).
   - These hooks handle client interaction and cache invalidation.
   - Equipment changes require checking availability first with `getEquippableWeapons/Armor`

3. **Session Key Handling**
   - Use `useSessionKey` to get the validation status (`sessionKeyState`, `needsUpdate`) of the AA key. (*Be aware of its current redundant data fetching*).
   - Use `useGame` or specific hooks to trigger session key updates (`updateSessionKey`).
   - Use `useSessionFunding` or `WalletBalances` component logic for monitoring and managing session key funding.

## Hook Responsibilities (Illustrative - Refer to `architecture.md` for full detail)

- **`useCachedDataFeed`**: Manages local cache of historical event/chat logs, determines start block for snapshot polling.
- **`useUiSnapshot`**: Polls for live data (`client.getUiSnapshot`), integrates cached data, handles raw data mapping (currently array-based), caches result. The core data fetcher.
- **`useBattleNads`**: Consumes `useUiSnapshot` data, maps contract → domain → UI models, provides stable `gameState`.
- **`useSessionKey`**: Validates AA session key state. *Currently fetches data independently and redundantly*.
- **`useGame`**: Orchestrates high-level game state, combines data from other hooks (`useBattleNads`, `useSessionKey`), provides action mutations (`moveCharacter`, `attack`, `sendChatMessage`, `updateSessionKey`). Primary interface for `AppInitializer`.
- **`useGameMachine`**: Manages pre-game state flow (wallet/character/key checks).
- **`useWalletBalances`**: Manages fetching and display of wallet balance information.
- **`useEquipment`**: Focused hook for equipment viewing and modification actions.

## Error Handling & Performance

1. **Error Boundaries**
   - Implement error boundaries around game components
   - Handle contract errors gracefully with user-friendly messages
   - Provide clear recovery paths for common failure scenarios

2. **Optimistic Updates**
   - Implement optimistic updates for movement and chat actions
   - Always invalidate the appropriate cache keys after mutations
   - Follow the pattern: mutate → optimistic update → invalidate cache

3. **Query Optimization**
   - Use query selectors to avoid unnecessary re-renders
   - Leverage React-Query's stale time and cache time configurations
   - Implement proper dependencies in query/mutation hooks

## Code Organization

1. **Feature Grouping**
   - Group related hooks and components by feature
   - Follow the established directory structure
   - Place new blockchain adapters in `blockchain/adapters`

2. **Naming Conventions**
   - Prefix hooks with `use`
   - Prefix state machine hooks with `useMachine`
   - Name client adapters with camelCase and suffix with `Adapter`

3. **Type Safety**
   - Always use the proper type imports from `types` directory
   - Maintain separation between contract, domain, and UI types
   - Use mappers to transform between type domains

## Development Process

1. **Testing Requirements**
   - Write tests for all blockchain interactions
   - Mock the `BattleNadsClient` for component testing
   - Use the testing utilities in the `test` directory

2. **Documentation**
   - Document all hooks with JSDoc comments
   - Update architecture documentation when making structural changes
   - Document all public APIs and component props